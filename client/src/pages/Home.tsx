import React, { useState, useEffect } from "react";
import { BASE_URL } from "../App";
import { Loader, Card, FormField } from "../components";

interface RenderCardProps {
  data: DataResult[];
  title: string;
}

export interface DataResult {
  __v: number;
  _id: string;
  name: string;
  photo: string;
  prompt: string;
}

const RenderCards = ({ data, title }: RenderCardProps) => {
  return (
    <>
      {data.length > 0 ? (
        data.map((post: DataResult) => <Card key={post._id} {...post} />)
      ) : (
        <h2 className="mt-5 font-bold text-[#6449ff] text-xl uppercase">
          {title}
        </h2>
      )}
    </>
  );
};

const Home = () => {
  const [loading, setLoading] = useState<boolean>(false);
  const [allPosts, setAllPosts] = useState<DataResult[]>([]);
  const [searchText, setSearchText] = useState<string>("");

  const [searchedResults, setSearchedResults] = useState<DataResult[]>([]);
  const [searchTimeout, setSearchTimeout] = useState(0);

  useEffect(() => {
    const fetchPosts = async () => {
      setLoading(true);
      try {
        const response = await fetch(`${BASE_URL}/post`, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        });

        if (response.ok) {
          const result = await response.json();

          setAllPosts(result.data.reverse());
        }
      } catch (error) {
        alert(error);
      } finally {
        setLoading(false);
      }
    };

    fetchPosts();
  }, []);

  const handleSearchChange = (e: React.FormEvent<HTMLInputElement>) => {
    clearTimeout(searchTimeout);

    setSearchText(e.currentTarget.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResults = allPosts.filter(
          (item: DataResult) =>
            item.name.toLowerCase().includes(searchText.toLowerCase()) ||
            item.prompt.toLowerCase().includes(searchText.toLowerCase())
        );

        setSearchedResults(searchResults);
      }, 500)
    );
  };

  return (
    <section className="max-w-7xl mx-auto">
      <div>
        <h1 className="font-extrabold text-[#222328] text-[32px]">
          The Community Showcase
        </h1>
        <p className="mt-2 text-[#666e75] text-[16px] max-w-[500px]">
          Browse through a collection of imaginative and visually stunning
          images generated by DALL-E AI.
        </p>
      </div>

      <div className="mt-16">
        <FormField
          labelName="Search posts"
          type="text"
          name="text"
          placeholder="Search posts"
          value={searchText}
          handleChange={handleSearchChange}
        />
      </div>

      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="font-medium text-[#666e75] text-xl mb-3">
                Showing results for{" "}
                <span className="text-[#222328]">{searchText}</span>
              </h2>
            )}
            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
              {searchText ? (
                <RenderCards data={searchedResults} title="No search results found" />
              ) : (
                <RenderCards data={allPosts} title="No Posts found" />
              )}
            </div>
          </>
        )}
      </div>
    </section>
  );
};

export default Home;
